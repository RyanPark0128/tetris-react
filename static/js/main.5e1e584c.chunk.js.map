{"version":3,"sources":["gameHelpers.js","components/styles/StyledTetris.js","tetrominos.js","hooks/useStage.js","components/styles/StyledCell.js","components/Cell.js","components/styles/StyledStage.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js","img/bg.png"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledCell","props","type","React","memo","StyledStage","height","width","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.5e1e584c.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () =>\n    Array.from(Array(STAGE_HEIGHT), () =>\n        new Array(STAGE_WIDTH).fill([0, 'clear'])\n    )\n\nexport const checkCollision = (player, stage, { x: moveX, y: moveY}) => {\n    for (let y=0; y < player.tetromino.length; y += 1) {\n        for (let x = 0; x < player.tetromino[y].length; x += 1) {\n            if (player.tetromino[y][x] !== 0) {\n                if (\n                !stage[y + player.pos.y + moveY] ||\n                !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n                stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\n                ) {\n                    return true;\n                }\n            }\n        }\n    }\n}","import styled from 'styled-components';\n\nimport bgImage from '../../img/bg.png'\n\nexport const StyledTetrisWrapper = styled.div`\n    width: 100vw;\n    height: 100vh;\n    background: url(${bgImage}) #000;\n    background-size: cover;\n    overflow: hidden;\n`\n\nexport const StyledTetris = styled.div`\n    display: flex;\n    align-items: flex-start;\n    padding: 40px;\n    margin: 0 auto;\n    max-width: 900px;\n\n    aside {\n        width: 100%;\n        max-width: 200px;\n        display: block;\n        padding: 0 20px;\n    }\n`","export const TETROMINOS = {\n    0: { shape: [[0]], color: '0, 0, 0'},\n    I: {\n        shape: [\n            [0, 'I', 0, 0],\n            [0, 'I', 0, 0],\n            [0, 'I', 0, 0],\n            [0, 'I', 0, 0]\n        ],\n        color: '80, 227, 230',\n    },\n    J: {\n        shape: [\n            [0, 'J', 0],\n            [0, 'J', 0],\n            ['J', 'J', 0]\n        ],\n        color: '36, 95, 223',\n    },\n    L: {\n        shape: [\n            [0, 'L', 0],\n            [0, 'L', 0],\n            [0, 'L', 'L']\n        ],\n        color: '223, 173, 36',\n    },\n    O: {\n        shape: [\n            ['O', 'O'],\n            ['O', 'O']\n        ],\n        color: '223, 217, 36',\n    },\n    S: {\n        shape: [\n            [0, 'S', 'S'],\n            ['S', 'S', 0],\n            [0, 0, 0]\n        ],\n        color: '48, 211, 56',\n    },\n    T: {\n        shape: [\n            [0, 0, 0],\n            ['T', 'T', 'T'],\n            [0, 'T', 0]\n        ],\n        color: '132, 61, 198',\n    },\n    Z: {\n        shape: [\n            ['Z', 'Z', 0],\n            [0, 'Z', 'Z'],\n            [0, 0, 0]\n        ],\n        color: '227, 78, 78',\n    },\n\n}\n\nexport const randomTetromino = () => {\n    const tetrominos = 'IJLOSTZ';\n    const randTetromino = \n        tetrominos[Math.floor(Math.random() * tetrominos.length)];\n    return TETROMINOS[randTetromino];\n}\n\n","import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n    const [stage, setStage] = useState(createStage());\n    const [rowsCleared, setRowsCleared] = useState(0);\n\n    useEffect(() => {\n        setRowsCleared(0);\n        const sweepRows = newStage =>\n            newStage.reduce((ack, row) => {\n                if (row.findIndex(cell => cell[0] === 0) === -1) {\n                    setRowsCleared(prev => prev + 1);\n                    ack.unshift(new Array(newStage[0].length).fill([0, 'clear']))\n                    return ack;\n                }\n                ack.push(row);\n                return ack;\n            }, [])\n\n        const updateStage = prevStage => {\n            const newStage = prevStage.map(row =>\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\n            );\n\n        player.tetromino.forEach((row, y) => {\n            row.forEach((value, x) => {\n                if (value !== 0) {\n                    newStage[y + player.pos.y][x + player.pos.x] = [\n                        value,\n                        `${player.collided ? 'merged' : 'clear' }`,\n                    ];\n                }\n            })\n        });\n\n        if (player.collided) {\n            resetPlayer();\n            return sweepRows(newStage)\n        }\n\n        return newStage\n    };\n        setStage(prev => updateStage(prev))\n    }, [player, resetPlayer])\n\n    return [stage, setStage, rowsCleared];\n}","import styled from 'styled-components';\n\nexport const StyledCell = styled.div`\n    width: auto;\n    background: rgba(${props => props.color}, 0.8);\n    border: ${props => (props.type === 0 ? '0px solid' : '4px solid')}\n    border-bottom-color: rgba(${props => props.color}, 0.1);\n    border-right-color: rgba(${props => props.color}, 1);\n    border-top-color: rgba(${props => props.color}, 1);\n    border-left-color: rgba(${props => props.color}, 0.3);\n`","import React from 'react';\nimport { StyledCell} from './styles/StyledCell'\nimport { TETROMINOS } from '../tetrominos';\n\nconst Cell = ({ type }) => (\n    <StyledCell type={type} color={TETROMINOS[type].color} />\n)\n\nexport default React.memo(Cell);\n","import styled from 'styled-components';\n\nexport const StyledStage = styled.div`\n    display: grid;\n    grid-template-rows: repeat(\n        ${props => props.height},\n        calc(25vw / ${props => props.width})\n    );\n    grid-template-columns: repeat(${props => props.width}, 1fr);\n    grid-gap: 1px;\n    border: 2px solid #333;\n    width: 100%;\n    max-width: 25vw;\n    background: #111;\n`","import React from 'react';\nimport Cell from './Cell';\nimport { StyledStage } from './styles/StyledStage';\n\nconst Stage = ({ stage }) => (\n    <StyledStage width={stage[0].length} height={stage.length}>\n        {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\n    </StyledStage>\n)\n\nexport default Stage","import styled from 'styled-components';\n\nexport const StyledDisplay = styled.div`\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    margin: 0 0 20px 0;\n    padding: 20px;\n    border: 4px solid #333;\n    min-height: 30px;\n    width: 100%;\n    border-radius: 20px;\n    color: ${props => (props.gameOver ? 'red' : '#999')};\n    background: #000;\n    font-family: Pixel, Arial, Helvetica, sans-serif;\n    font-size: 0.8rem;\n`","import React from 'react';\nimport { StyledDisplay } from './styles/StyledDisplay'\n\nconst Display = ({ gameOver, text }) => (\n    <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\n)\n\nexport default Display; ","import styled from 'styled-components';\n\nexport const StyledStartButton = styled.button`\n    box-sizing: border-box;\n    margin: 0 0 20px 0;\n    padding: 20px;\n    min-height: 30px;\n    width: 100%;\n    border-radius: 20px;\n    border: none;\n    color: white;\n    background: #333;\n    font-family: Pixel, Arial, Helvetica, sans-serif;\n    font-size: 1rem;\n    outline: none;\n    cursor: pointer;\n    `","import React from 'react';\nimport { StyledStartButton } from './styles/StyledStartButton'\n\nconst StartButton = ({ callback }) => (\n    <StyledStartButton onClick={callback}>Start Game</StyledStartButton> \n)\n\nexport default StartButton;","import React, { useState } from 'react';\n\nimport { createStage, checkCollision } from '../gameHelpers';\n\n// style\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris'\n\n// Custom Hooks\nimport { useInterval } from '../hooks/useInterval'\nimport { usePlayer } from '../hooks/usePlayer'\nimport { useStage } from '../hooks/useStage'\nimport { useGameStatus } from '../hooks/useGameStatus'\n\n// Components\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\n\nconst Tetris = () => {\n    const [dropTime, setDropTime] = useState(null);\n    const [gameOver, setGameOver] = useState(false);\n\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n    const [score, setScore, row, setRows, level, setLevel] = useGameStatus(rowsCleared)\n\n    const movePlayer = dir => {\n        if (!checkCollision(player, stage, { x: dir, y: 0})) {\n            updatePlayerPos({ x: dir, y: 0})\n        }\n    }\n\n    const startGame = () => {\n        //reset\n        setStage(createStage());\n        setDropTime(1000);\n        resetPlayer();\n        setGameOver(false);\n        setScore(0);\n        setRows(0);\n        setLevel(0);\n        \n    }\n\n    const drop = () => {\n\n        if (row > (level + 1) * 10) {\n            setLevel(prev => prev + 1);\n            setDropTime(1000 / (level + 1) + 200)\n        }\n        if (!checkCollision(player, stage, { x: 0, y: 1})){\n            updatePlayerPos({ x: 0, y: 1, collided: false})\n        } else {\n            if (player.pos.y < 1) {\n                setGameOver(true);\n                setDropTime(null);\n            }\n            updatePlayerPos({ x: 0, y: 0, collided: true})\n        }\n    }\n\n    const keyUp = ({ keyCode }) => {\n        if (!gameOver) {\n            if (keyCode === 40) {\n                setDropTime(1000 / (level + 1) + 200)\n            }\n        }\n    }\n    const dropPlayer = () => {\n        setDropTime(null);\n        drop();\n    }\n\n    const move = ({ keyCode }) => {\n        if (!gameOver) {\n            if (keyCode === 37) {\n                movePlayer(-1);\n            } else if (keyCode === 39) {\n                movePlayer(1);\n            } else if (keyCode === 40) {\n                dropPlayer();\n            } else if (keyCode === 38) {\n                playerRotate(stage, 1);\n            }\n        }\n    }\n\n    useInterval(() => {\n        drop();\n    }, dropTime)\n\n    return (\n        <StyledTetrisWrapper\n            role=\"button\"\n            tabIndex=\"0\"\n            onKeyDown={e => move(e)}\n            onKeyUp={keyUp}\n        >\n            <StyledTetris>\n            <Stage stage={stage} />\n            <aside>\n                {gameOver ? (\n                    <Display gameOver={gameOver} text=\" Game Over\" />\n                ) : (\n                <div>\n                    <Display text={`Score; ${score}`} />\n                    <Display text={`Rows; ${row}`} />\n                    <Display text={`Level; ${level}`} />\n                </div>\n                )}\n                <StartButton callback={startGame}/>\n            </aside>\n            </StyledTetris>\n        </StyledTetrisWrapper>\n    )\n}\n\nexport default Tetris;","import { useState, useCallback } from 'react';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers'\n\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState({\n        pos: { x: 0, y: 0 },\n        tetromino: TETROMINOS[0].shape,\n        collided: false,\n    });\n\n    const rotate = (matrix, dir) => {\n        const rotatedTetro = matrix.map((_, index) =>\n            matrix.map(col => col[index]),\n        );\n\n        if (dir > 0) return rotatedTetro.map(row => row.reverse(0))\n        return rotatedTetro.reverse();\n    }\n\n    const playerRotate = (stage, dir) => {\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n        const pos = clonedPlayer.pos.x;\n        let offset = 1;\n        while(checkCollision(clonedPlayer, stage, { x: 0, y: 0})) {\n            clonedPlayer.pos.x += offset;\n            offset = -(offset + (offset > 0 ? 1 : -1));\n            if(offset > clonedPlayer.tetromino[0].length) {\n                rotate(clonedPlayer.tetromino, -dir);\n                clonedPlayer.pos.x = pos;\n            }\n        }\n        setPlayer(clonedPlayer)\n    }\n\n    const updatePlayerPos = ({ x, y, collided}) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)},\n            collided,\n        }))\n    }\n\n    const resetPlayer = useCallback(() => {\n        setPlayer({\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n            tetromino: randomTetromino().shape,\n            collided: false,\n        })\n    }, [])\n\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\n}","import { useState, useEffect, useCallback } from 'react';\n\nexport const useGameStatus = rowsCleared => {\n    const [score, setScore] = useState(0);\n    const [rows, setRows] = useState(0);\n    const [level, setLevel] = useState(0);\n\n    const linePoints = [40, 100, 300, 1200];\n\n    const calcScore = useCallback(() => {\n        if (rowsCleared > 0) {\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n            setRows(prev => prev + rowsCleared);\n        }\n\n    }, [level, linePoints, rowsCleared])\n\n    useEffect(() => {\n        calcScore();\n    }, [calcScore, rowsCleared, score])\n\n    return [score, setScore, rows, setRows, level, setLevel];\n}","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n  </div>\n)\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";"],"sourceRoot":""}